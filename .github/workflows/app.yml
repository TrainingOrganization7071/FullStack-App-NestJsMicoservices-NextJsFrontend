name: CI/CD Pipeline for FrontEnd NextJs - Web App

on:
  push:
    paths:
      - "frontend_app/**"
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: 'appfrontend_azure'
  DOCKER_IMAGE_TAG: 'latest'
  AZURE_RESOURCE_GROUP: 'minimal_infra_auth'
  AZURE_WEBAPP_NAME: 'webapp-frontend-zkvavdxonfjjbvhj'
  AZURE_WEBAPP_PACKAGE_PATH: './frontend_app'

jobs:


  # Job to Lint Code
  Lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ./frontend_app
          npm ci

      # Run Lint
      - name: Run Lint
        run: |
          cd ./frontend_app
          npm run lint --if-present


  # Job to Run Tests
  Test:
    runs-on: ubuntu-latest
    needs: Lint  # Ensure linting is successful before testing
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ./frontend_app
          npm ci

      # Run Tests
      - name: Run Tests
        run: |
          cd ./frontend_app
          npm test --if-present


  # Job to Build Application
  Build:
    runs-on: ubuntu-latest
    needs: Test  # Ensure tests pass before building
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Install dependencies
      - name: Install dependencies
        working-directory: ./frontend_app
        run: npm ci

      # Build application
      - name: Run Build
        working-directory: ./frontend_app
        run: npm run build --if-present

      # Upload build artifact for deployment
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: ./frontend_app/.next/**

      # Debug: List contents of the build directory
      - name: List build directory
        run: |
          ls -la ./frontend_app
          ls -la ./frontend_app/.next


  # Job to Deploy to DockerHub
  Deploy_To_DockerHub:
    runs-on: ubuntu-latest
    needs: Build  # Ensure build is complete before deploying
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up Docker Buildx for advanced build options
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker Login
        run: docker info
        
      # Build and push Docker image to DockerHub
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} ./frontend_app
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}


  # Job to Deploy to Azure Web App
  Deploy_To_WebApp:
    runs-on: ubuntu-latest
    needs: Deploy_To_DockerHub  # Ensure DockerHub deployment is complete
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Install dependencies to ensure build is up-to-date
      - name: Install dependencies
        run: |
          cd ./frontend_app
          npm ci
          npm run build --if-present

      # Compress the build folder for deployment
      - name: Compress build output
        run: |
          cd ./frontend_app
          zip -r ../frontend_app.zip .next public package.json package-lock.json

      # Debug compressed file location
      - name: Verify compressed file
        run: |
          ls -la
          ls -la ./frontend_app.zip

      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./frontend_app.zip
              
              
         
















          